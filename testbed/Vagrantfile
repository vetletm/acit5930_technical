# -*- mode: ruby -*-
# vi: set ft=ruby :

# This will set up the two VMs required to run the EPC and RAN
# It will:
# => Add bridged and internal networks
# => Set IP address and routing
# => Add IP forwarding to EPC to allow traffic to flow to the core
# Later, I will add:
# => Mininet, BMV2
# => Separate docker containers from bridged network
# => Connect containers to software switch as a bridge
# => Implement P4 to test in-band network monitoring

Vagrant.configure("2") do |config|
  # Dedicated VM for the Packet Core
  config.vm.define "epc" do |epc|
    # Using Ubuntu 18.04 Bionic Beaver
    epc.vm.box = "ubuntu/focal64"

    # Using vagrant-disksize plugin
    epc.disksize.size = '50GB'

    # set name, ram, cpus
    epc.vm.provider "virtualbox" do |v|
      v.name = "epc"
      v.memory = 4096
      v.cpus = 2
    end

    epc.vm.network "private_network", ip: "10.10.1.2", virtualbox__intnet: true

    # Install required packages and build binaries
    epc.vm.provision "shell", path: "scripts/bootstrap_epc.sh"
    # Install P4-OvS
    epc.vm.provision "shell", path: "scripts/install_p4ovs.sh"
  end

  # Dedicated VM for eNB and UE
  config.vm.define "ran" do |ran|
    # Using Ubuntu 18.04 Bionic Beaver
    ran.vm.box = "ubuntu/bionic64"

    # Using vagrant-disksize plugin
    ran.disksize.size = '20GB'

    # set name, ram, cpus
    ran.vm.provider "virtualbox" do |v|
      v.name = "ran"
      v.memory = 4096
      v.cpus = 2
    end

    # .1 addresses are usually not suggested, but it will be fine in this case, easily changed later
    ran.vm.network "private_network", ip: "10.10.1.1", virtualbox__intnet: true

    # Install required packages and build binaries
    ran.vm.provision "shell", path: "scripts/bootstrap_ran.sh"
    ran.vm.provision "shell", path: "scripts/user_ran.sh"

    # Copy and move config files to correct locations
    ran.vm.provision "file", source: "config/rcc.band7.tm1.nfapi.conf", destination: "~/"
    ran.vm.provision "shell", inline: "mv /home/vagrant/rcc.band7.tm1.nfapi.conf /home/netmon/src/enb_folder/ci-scripts/conf_files/"

    ran.vm.provision "file", source: "config/ue_eurecom_test_sfr.conf", destination: "~/"
    ran.vm.provision "shell", inline: "mv /home/vagrant/ue_eurecom_test_sfr.conf /home/netmon/src/ue_folder/openair3/NAS/TOOLS/"

    ran.vm.provision "file", source: "config/ue.nfapi.conf", destination: "~/"
    ran.vm.provision "shell", inline:  "mv /home/vagrant/ue.nfapi.conf /home/netmon/src/ue_folder/ci-scripts/conf_files/"

  end

  # NOTE: This machine only contains P4-OvS runtime, not a P4-compiler, to save space.
  #     - For P4-OvS and P4-Compiler on the same machine, use the "p4compiler" machine
  config.vm.define "p4ovs" do |p4ovs|
    # Using Ubuntu 20.10 Groovy Gorilla
    p4ovs.vm.box = "ubuntu/groovy64"

    # Using vagrant-disksize plugin
    p4ovs.disksize.size = '30GB'

    # set name, ram, cpus
    p4ovs.vm.provider "virtualbox" do |v|
      v.name = "p4ovs"
      v.memory = 4096
      v.cpus = 2
    end

    # Gonna use as switch to connect EPC and RAN
    p4ovs.vm.network "private_network", ip: "10.10.1.3", virtualbox__intnet: true

    # Compile P4-OvS
    p4ovs.vm.provision "shell", path: "scripts/bootstrap_p4ovs.sh"
    # p4ovs.vm.provision "shell", path: "archived_scripts/install-p4dev-v2.sh"
  end

  # P4-Compiler and P4-OvS on the same machine
  config.vm.define "p4compiler" do |p4compiler|
    p4compiler.vm.box = "ubuntu/focal64"

    p4compiler.disksize.size = '30GB'

    p4compiler.vm.provider "virtualbox" do |v|
      v.name = "p4compiler"
      v.memory = "4096"
      v.cpus = 2
    end

    p4compiler.vm.network "private_network", ip: "10.10.1.4", virtualbox__intnet: true

    p4compiler.vm.provision "shell", path: "scripts/bootstrap_p4compiler.sh"
  end
end
